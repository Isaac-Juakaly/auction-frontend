
'use client';

import { useEffect } from 'react';
import { io } from 'socket.io-client';
import { BASE_URL } from '@/lib/api';

type Props = {
  userId: string;

  onAuctionRestarted?: (data: {
    itemId: string;
    auctionEndTime: number;
    isClosed: boolean;
  }) => void;

  onNewHighestBid?: (data: {
    itemId: string;
    amount: number;
    bidderId: string;
  }) => void;

  onAuctionWon?: (data: {
    itemId: string;
    amount: number;
  }) => void;

  onItemSold?: (data: {
    itemId: string;
    winnerId: string;
    amount: number;
  }) => void;
};

export default function SocketClient({
  userId,
  onAuctionRestarted,
  onNewHighestBid,
  onAuctionWon,
  onItemSold,
}: Props) {
  useEffect(() => {
    const socket = io(BASE_URL); // adapte l‚ÄôURL selon ton backend

    socket.emit('join', userId);
    socket.on('connect', () => {
      console.log('‚úÖ WebSocket connect√©');
      socket.emit('join', userId);
    });

    socket.on('AUCTION_RESTARTED', (data) => {
      console.log('üì¢ AUCTION_RESTARTED re√ßu :', data);
      onAuctionRestarted?.(data);
    });

    socket.on('NEW_HIGHEST_BID', (data) => {
      console.log('üìà NEW_HIGHEST_BID re√ßu :', data);
      onNewHighestBid?.(data);
    });

    socket.on('AUCTION_WON', (data) => {
      console.log('üèÜ AUCTION_WON re√ßu :', data);
      onAuctionWon?.(data);
    });

    socket.on('ITEM_SOLD', (data) => {
      console.log('üõí ITEM_SOLD re√ßu :', data);
      onItemSold?.(data);
    });

    return () => {
      socket.disconnect();
      console.log('‚ùå WebSocket d√©connect√©');
    };
  }, [userId]);

  return null;
}
